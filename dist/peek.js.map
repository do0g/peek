{"version":3,"sources":["../src/peek.js"],"names":["functionNames","Map","_setFunctionName","fn","name","set","_getFunctionName","get","isNilOrEmpty","typeOf","toString","call","obj","split","slice","toLowerCase","notNilOrEmpty","first","list","pred","res","getFunctionName","formatArg","Function","Array","v","vals","Object","String","val","formatReturnValue","formatFunction","args","result","log","maybePeek","peek","maybeName","indent","_tapped","f","tappedArgs","repeat","maybeNamed","maybePeeked","err"],"mappings":";;;;;;AAAA;;;;AAEA,IAAMA,gBAAgB,IAAIC,GAAJ,EAAtB;AACA,IAAMC,mBAAmB,kBAAM,UAACC,EAAD,EAAKC,IAAL,EAAc;AAC3CJ,gBAAcK,GAAd,CAAkBF,EAAlB,EAAsBC,IAAtB;AACA,SAAOD,EAAP;AACD,CAHwB,CAAzB;;AAKA,IAAMG,mBAAmB,SAAnBA,gBAAmB;AAAA,SAAMN,cAAcO,GAAd,CAAkBJ,EAAlB,CAAN;AAAA,CAAzB;;AAEA,IAAMK,eAAe,oBAAQ,8BAAR,CAArB;AACA,IAAMC,SAAS,SAATA,MAAS;AAAA,SACb,GAAGC,QAAH,CACGC,IADH,CACQC,GADR,EAEGC,KAFH,CAES,GAFT,EAEc,CAFd,EAGKC,KAHL,CAGW,CAHX,EAGc,CAAC,CAHf,EAIKC,WAJL,EADa;AAAA,CAAf;AAOA,IAAMC,gBAAgB,uBAAWR,YAAX,CAAtB;;AAEA,IAAMS,QAAQ,SAARA,KAAQ,CAACC,IAAD;AAAA,MAAOC,IAAP,uEAAcH,aAAd;AAAA,SAAgC,YAAa;AACzD,QAAIR,aAAaU,IAAb,CAAJ,EAAwB;AACxB,QAAMf,KAAK,iBAAKe,IAAL,CAAX;AACA,QAAME,MAAMjB,8BAAZ;AACA,WAAOgB,KAAKC,GAAL,IAAYA,GAAZ,GAAkBH,MAAM,iBAAKC,IAAL,CAAN,EAAkBC,IAAlB,6BAAzB;AACD,GALa;AAAA,CAAd;;AAOA,IAAME,kBAAkBJ,MAAM,CAC5BX,gBAD4B,EAE5B,iBAAK,MAAL,CAF4B,EAG5B,mBAAO,WAAP,CAH4B,CAAN,EAIrBU,aAJqB,CAAxB;;AAMA;AACA,IAAMM,YAAY,iBAAK,CACrB,CAAC,eAAGC,QAAH,CAAD,EAAe,iBAAKF,eAAL,EAAsB;AAAA,cAAWjB,IAAX;AAAA,CAAtB,CAAf,CADqB,EAErB,CAAC,eAAGoB,KAAH,CAAD,EAAY,iBAAK,gBAAI;AAAA,SAAKF,UAAUG,CAAV,CAAL;AAAA,CAAJ,CAAL,EAA6B;AAAA,eAAY,iBAAK,IAAL,EAAWC,IAAX,CAAZ;AAAA,CAA7B,CAAZ,CAFqB,EAGrB,CAAC,oBAAQ,eAAQ,eAAGC,MAAH,CAAR,CAAR,CAAD,EAA+BlB,MAA/B,CAHqB,EAIrB,CAAC,eAAGmB,MAAH,CAAD,EAAa;AAAA,gBAAWC,GAAX;AAAA,CAAb,CAJqB,EAKrB,2BALqB,CAAL,CAAlB;AAOA,IAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,SAAOD,WAASP,UAAUO,GAAV,CAAT,GAA4B,EAAnC;AAAA,CAA1B;AACA,IAAME,iBAAiB,SAAjBA,cAAiB,CAAC5B,EAAD,EAAK6B,IAAL,EAAWC,MAAX;AAAA,SAAyBZ,gBAAgBlB,EAAhB,CAAzB,SAAgD,iBAAK,gBAAImB,SAAJ,CAAL,EAAqB,iBAAK,IAAL,CAArB,EAAiCU,IAAjC,CAAhD,SAA0FF,kBAAkBG,MAAlB,CAA1F;AAAA,CAAvB;;AAEA;AACA,IAAMC,MAAM,SAANA,GAAM;AAAA;;AAAA,SAAa,qBAAQA,GAAR,2BAAb;AAAA,CAAZ,C,CAA+C;AAC/C;;AAEA,IAAMC,YAAY,iBAAK,CACrB,CAAC,eAAGZ,QAAH,CAAD,EAAe;AAAA,SAAMa,KAAKjC,EAAL,CAAN;AAAA,CAAf,CADqB,EAErB,CAAC,eAAGqB,KAAH,CAAD,EAAY,gBAAI;AAAA,SAAMW,UAAUhC,EAAV,CAAN;AAAA,CAAJ,CAAZ,CAFqB,EAGrB,2BAHqB,CAAL,CAAlB;;AAMA,IAAMkC,YAAY,SAAZA,SAAY;AAAA,SAAQ,iBAAK,eAAGd,QAAH,CAAL,EAAmB,iBAAKrB,gBAAL,EAAuBE,IAAvB,CAAnB,CAAR;AAAA,CAAlB;;AAEA,IAAIkC,SAAS,CAAC,CAAd;AACA,IAAMF,OAAO,SAAPA,IAAO,CAACjC,EAAD,EAAKC,IAAL,EAAc;AACzB,MAAID,GAAGoC,OAAP,EAAgB;AACd,WAAOpC,EAAP;AACD;AACD,MAAIC,IAAJ,EAAU;AACRF,qBAAiBC,EAAjB,EAAqBC,IAArB;AACD;;AAED,MAAMoC,IAAI,SAAJA,CAAI,GAAa;AAAA,sCAATR,IAAS;AAATA,UAAS;AAAA;;AACrB,QAAI;AACFM,gBAAU,CAAV;AACA,UAAMG,aAAaN,UAAUH,IAAV,CAAnB;AACAE,UAAI,IAAIQ,MAAJ,CAAWJ,MAAX,IAAqBP,eAAe5B,EAAf,EAAmB6B,IAAnB,CAAzB;AACA,UAAMC,SAAS9B,uCAAMsC,UAAN,EAAf;AACA,UAAME,aAAaN,UAAUN,eAAe5B,EAAf,EAAmB6B,IAAnB,CAAV,EAAoCC,MAApC,CAAnB;AACA,UAAMW,cAAcT,UAAUQ,UAAV,CAApB;AACAT,UAAO,IAAIQ,MAAJ,CAAWJ,MAAX,CAAP,YAAgChB,UAAUsB,WAAV,CAAhC;AACA,aAAOA,WAAP;AACD,KATD,CASE,OAAOC,GAAP,EAAY;AACZX,UAAO,IAAIQ,MAAJ,CAAWJ,MAAX,CAAP,+CAAqCO,GAArC;AACA,YAAMA,GAAN;AACD,KAZD,SAYU;AACRP,gBAAU,CAAV;AACD;AACF,GAhBD;AAiBApC,mBAAiBsC,CAAjB,EAAoBlC,iBAAiBH,EAAjB,CAApB;AACAqC,IAAED,OAAF,GAAY,IAAZ;AACA,SAAOC,CAAP;AACD,CA5BD;;kBA8BeJ,I","file":"peek.js","sourcesContent":["import { flip, when, join, is, always, curry, anyPass, isNil, complement, prop, isEmpty, head, tail, cond, pipe, map, identity, T } from 'ramda';\n\nconst functionNames = new Map();\nconst _setFunctionName = curry((fn, name) => {\n  functionNames.set(fn, name);\n  return fn;\n});\n\nconst _getFunctionName = fn => functionNames.get(fn);\n\nconst isNilOrEmpty = anyPass([isNil, isEmpty]);\nconst typeOf = obj => (\n  {}.toString\n    .call(obj)\n    .split(' ')[1]\n      .slice(0, -1)\n      .toLowerCase()\n);\nconst notNilOrEmpty = complement(isNilOrEmpty);\n\nconst first = (list, pred = notNilOrEmpty) => (...args) => {\n  if (isNilOrEmpty(list)) return;\n  const fn = head(list);\n  const res = fn(...args);\n  return pred(res) ? res : first(tail(list), pred)(...args);\n};\n\nconst getFunctionName = first([\n  _getFunctionName,\n  prop('name'),\n  always('anonymous')\n], notNilOrEmpty);\n\n//const logVal = f => tap(v => console.log(`${f}${typeOf(v)} ${v}`));\nconst formatArg = cond([\n  [is(Function), pipe(getFunctionName, name => `${name}`)],\n  [is(Array), pipe(map(v => formatArg(v)), vals => `[${join(', ', vals)}]`)],\n  [anyPass([isNil, is(Object)]), typeOf],\n  [is(String), val => `'${val}'`],\n  [T, identity]\n]);\nconst formatReturnValue = val => val ? `${formatArg(val)}` : '';\nconst formatFunction = (fn, args, result) => `${getFunctionName(fn)}(${pipe(map(formatArg), join(', '))(args)})${formatReturnValue(result)}`;\n\n//const logIndent = curry((indent, val) => log(`${indent}${val}`));\nconst log = (...args) => console.log(...args); // eslint-disable-line no-console\n//const error = (...args) => console.error(...args); // eslint-disable-line no-console\n\nconst maybePeek = cond([\n  [is(Function), fn => peek(fn)],\n  [is(Array), map(fn => maybePeek(fn))],\n  [T, identity]\n]);\n\nconst maybeName = name => when(is(Function), flip(_setFunctionName)(name));\n\nlet indent = -2;\nconst peek = (fn, name) => {\n  if (fn._tapped) {\n    return fn;\n  }\n  if (name) {\n    _setFunctionName(fn, name);\n  }\n\n  const f = (...args) => {\n    try {\n      indent += 2;\n      const tappedArgs = maybePeek(args);\n      log(' '.repeat(indent) + formatFunction(fn, args));\n      const result = fn(...tappedArgs);\n      const maybeNamed = maybeName(formatFunction(fn, args))(result);\n      const maybePeeked = maybePeek(maybeNamed);\n      log(`${' '.repeat(indent)} -> ${formatArg(maybePeeked)}`);\n      return maybePeeked;\n    } catch (err) {\n      log(`${' '.repeat(indent)} (ノಠ益ಠ)ノ彡${err}`);\n      throw err;\n    } finally {\n      indent -= 2;\n    }\n  };\n  _setFunctionName(f, _getFunctionName(fn));\n  f._tapped = true;\n  return f;\n};\n\nexport default peek;\n"]}