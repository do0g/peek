{"version":3,"sources":["../src/peek.js"],"names":["isFunction","fn","isPlaceHolder","tweak","options","formatters","tappedFunctions","_tap","push","_isTapped","indexOf","functionNames","Map","_setFunctionName","name","set","_getFunctionName","get","isNilOrEmpty","typeOf","toString","call","obj","split","slice","toLowerCase","notNilOrEmpty","first","list","pred","res","getFunctionName","undefined","formatArg","Array","v","vals","Object","String","val","formatReturnValue","formatFunction","args","result","log","mapUnless","unlessFn","length","results","idx","maybePeek","peek","maybeName","maybeFn","indent","Error","f","tappedArgs","formattedFunction","repeat","apply","maybePeeked","err"],"mappings":"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","file":"peek.js","sourcesContent":["import { concat, join, is, always, curry, anyPass, isNil, complement, prop, isEmpty, head, tail, cond, pipe, map, identity, T } from 'ramda';\n\nconst isFunction = fn => typeof fn === 'function';\nconst isPlaceHolder = fn => !!fn['@@functional/placeholder'];\n\nconst tweak = (options = {}) => {\n  const { formatters = [] } = options;\n  const tappedFunctions = [];\n  const _tap = curry(fn => {\n    tappedFunctions.push(fn);\n    return fn;\n  });\n\n  const _isTapped = fn => tappedFunctions.indexOf(fn) !== -1;\n\n  const functionNames = new Map();\n  const _setFunctionName = curry((fn, name) => {\n    functionNames.set(fn, name);\n    return fn;\n  });\n\n  const _getFunctionName = fn => functionNames.get(fn);\n\n  const isNilOrEmpty = anyPass([isNil, isEmpty]);\n  const typeOf = obj => (\n    {}.toString.call(obj)\n      .split(' ')[1]\n      .slice(0, -1)\n      .toLowerCase()\n  );\n  const notNilOrEmpty = complement(isNilOrEmpty);\n\n  const first = (list, pred = notNilOrEmpty) => (...args) => {\n    if (isNilOrEmpty(list)) return;\n    const fn = head(list);\n    const res = fn(...args);\n    return pred(res) ? res : first(tail(list), pred)(...args);\n  };\n\n  const getFunctionName = first([\n    fn => isPlaceHolder(fn) ? '__' : undefined,\n    _getFunctionName,\n    prop('name'),\n    always('anonymous')\n  ], notNilOrEmpty);\n\n  //const logVal = f => tap(v => console.log(`${f}${typeOf(v)} ${v}`));\n  const formatArg = cond(concat(formatters, [\n    [isPlaceHolder, always('__')],\n    [isFunction, pipe(getFunctionName, name => `${name}`)],\n    [is(Array), pipe(map(v => formatArg(v)), vals => `[${join(', ', vals)}]`)],\n    [anyPass([isNil, is(Object)]), typeOf],\n    [is(String), val => `'${val}'`],\n    [T, identity]\n  ]));\n  const formatReturnValue = val => val ? `${formatArg(val)}` : '';\n  const formatFunction = (fn, args, result) => `${getFunctionName(fn)}(${pipe(map(formatArg), join(', '))(args)})${formatReturnValue(result)}`;\n\n  //const logIndent = curry((indent, val) => log(`${indent}${val}`));\n  const log = (...args) => console.log(...args); // eslint-disable-line no-console\n  //const error = (...args) => console.error(...args); // eslint-disable-line no-console\n\n  // for some reason map is dropping placeholders from the argument list,\n  // so this ensures they're preserved\n  const mapUnless = (unlessFn, fn, list) => {\n    var length = list.length;\n    var results = [];\n    for (var idx = 0; idx < length; idx++) {\n      results[idx] = unlessFn(list[idx]) ? list[idx] : fn(list[idx]);\n    }\n    return results;\n  };\n\n  const maybePeek = cond([\n    [isPlaceHolder, identity],\n    [isFunction, fn => peek(fn)],\n    [is(Array), list => mapUnless(isPlaceHolder, maybePeek, list)],\n    [T, identity]\n  ]);\n\n  const maybeName = (name, maybeFn) => typeof maybeFn === 'function' ? _setFunctionName(maybeFn, name) : maybeFn;\n\n  let indent = -2;\n  const peek = (fn, name) => {\n    if (typeof fn !== 'function') {\n      throw new Error('What choo talkin\\' \\'bout, Willis?');\n    }\n    if (_isTapped(fn)) {\n      return fn;\n    }\n    if (name) {\n      _setFunctionName(fn, name);\n    }\n\n    const f = (...args) => {\n      try {\n        indent += 2;\n        const tappedArgs = maybePeek(args);\n        //console.log(`tappedArgs: ${JSON.stringify(tappedArgs)}`);\n        const formattedFunction = formatFunction(fn, args);\n        log(' '.repeat(indent) + formattedFunction);\n        const result = fn.apply(fn, tappedArgs);\n        //const result = fn(...tappedArgs);\n        //console.log(`result: ${result}`);\n        const maybePeeked = maybePeek(maybeName(formattedFunction, result));\n        log(`${' '.repeat(indent)} -> ${formatArg(maybePeeked)}`);\n        return maybePeeked;\n      } catch (err) {\n        log(`${' '.repeat(indent)} (ノಠ益ಠ)ノ彡${err}`);\n        throw err;\n      } finally {\n        indent -= 2;\n      }\n    };\n    _setFunctionName(f, _getFunctionName(fn));\n    _tap(f);\n    return f;\n  };\n  return peek;\n};\n\nconst peek = tweak();\n\nexport default peek;\nexport {tweak};\n"]}