{"version":3,"sources":["../src/peek.js"],"names":["tweak","options","formatters","functionNames","Map","_setFunctionName","fn","name","set","_getFunctionName","get","isNilOrEmpty","typeOf","toString","call","obj","split","slice","toLowerCase","notNilOrEmpty","first","list","pred","res","getFunctionName","formatArg","Function","Array","v","vals","Object","String","val","formatReturnValue","formatFunction","args","result","log","maybePeek","peek","maybeName","indent","_tapped","f","tappedArgs","repeat","maybeNamed","maybePeeked","err"],"mappings":"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","file":"peek.js","sourcesContent":["import { concat, flip, when, join, is, always, curry, anyPass, isNil, complement, prop, isEmpty, head, tail, cond, pipe, map, identity, T } from 'ramda';\n\nconst tweak = (options = {}) => {\n  const { formatters = [] } = options;\n  const functionNames = new Map();\n  const _setFunctionName = curry((fn, name) => {\n    functionNames.set(fn, name);\n    return fn;\n  });\n\n  const _getFunctionName = fn => functionNames.get(fn);\n\n  const isNilOrEmpty = anyPass([isNil, isEmpty]);\n  const typeOf = obj => (\n    {}.toString.call(obj)\n      .split(' ')[1]\n      .slice(0, -1)\n      .toLowerCase()\n  );\n  const notNilOrEmpty = complement(isNilOrEmpty);\n\n  const first = (list, pred = notNilOrEmpty) => (...args) => {\n    if (isNilOrEmpty(list)) return;\n    const fn = head(list);\n    const res = fn(...args);\n    return pred(res) ? res : first(tail(list), pred)(...args);\n  };\n\n  const getFunctionName = first([\n    _getFunctionName,\n    prop('name'),\n    always('anonymous')\n  ], notNilOrEmpty);\n\n  //const logVal = f => tap(v => console.log(`${f}${typeOf(v)} ${v}`));\n  const formatArg = cond(concat(formatters, [\n    [is(Function), pipe(getFunctionName, name => `${name}`)],\n    [is(Array), pipe(map(v => formatArg(v)), vals => `[${join(', ', vals)}]`)],\n    [anyPass([isNil, is(Object)]), typeOf],\n    [is(String), val => `'${val}'`],\n    [T, identity]\n  ]));\n  const formatReturnValue = val => val ? `${formatArg(val)}` : '';\n  const formatFunction = (fn, args, result) => `${getFunctionName(fn)}(${pipe(map(formatArg), join(', '))(args)})${formatReturnValue(result)}`;\n\n  //const logIndent = curry((indent, val) => log(`${indent}${val}`));\n  const log = (...args) => console.log(...args); // eslint-disable-line no-console\n  //const error = (...args) => console.error(...args); // eslint-disable-line no-console\n\n  const maybePeek = cond([\n    [is(Function), fn => peek(fn)],\n    [is(Array), map(fn => maybePeek(fn))],\n    [T, identity]\n  ]);\n\n  const maybeName = name => when(is(Function), flip(_setFunctionName)(name));\n\n  let indent = -2;\n  const peek = (fn, name) => {\n    if (fn._tapped) {\n      return fn;\n    }\n    if (name) {\n      _setFunctionName(fn, name);\n    }\n\n    const f = (...args) => {\n      try {\n        indent += 2;\n        const tappedArgs = maybePeek(args);\n        log(' '.repeat(indent) + formatFunction(fn, args));\n        const result = fn(...tappedArgs);\n        const maybeNamed = maybeName(formatFunction(fn, args))(result);\n        const maybePeeked = maybePeek(maybeNamed);\n        log(`${' '.repeat(indent)} -> ${formatArg(maybePeeked)}`);\n        return maybePeeked;\n      } catch (err) {\n        log(`${' '.repeat(indent)} (ノಠ益ಠ)ノ彡${err}`);\n        throw err;\n      } finally {\n        indent -= 2;\n      }\n    };\n    _setFunctionName(f, _getFunctionName(fn));\n    f._tapped = true;\n    return f;\n  };\n  return peek;\n};\n\nconst peek = tweak();\n\nexport default peek;\nexport {tweak};\n"]}